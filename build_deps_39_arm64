#!/bin/bash

function begin_stage() {
  local stage_name=$1
  local distfile_mask=$2

  echo -ne "\033]0;${stage_name} stage\007"
  echo " * Cleaning and unpacking ${stage_name}"
  rm -rf $WORK/*

  if echo $distfile_mask | grep -q '\.tgz$' ; then
    tar -xzf ${DIST}/$distfile_mask -C $WORK
  elif echo $distfile_mask | grep -q '\.tar\.gz$' ; then
    tar -xzf ${DIST}/$distfile_mask -C $WORK
  elif echo $distfile_mask | grep -q '\.tar\.bz2$' ; then
    tar -xjf ${DIST}/$distfile_mask -C $WORK
  elif echo $distfile_mask | grep -q '\.tar\.xz$' ; then
    tar --xz -xf ${DIST}/$distfile_mask -C $WORK
  elif echo $distfile_mask | grep -q '\.zip$' ; then
    unzip -d $WORK ${DIST}/$distfile_mask
  fi

  pushd $WORK/`echo $distfile_mask | sed 's/\*.*//'`*
  echo " * Compiling ${stage_name}"
  sleep $PAUSE
}

function complete_stage() {
    local next=$1

    popd
    echo -n $next > $TARGET/stage
    sleep $PAUSE
}

if [[ ! ${2} ]] ; then
  echo
  echo "Pass all build options or use build-* wrappers instead."
  echo
  echo "<1 target path> <2 distfiles dir> [3 stage]"
  echo
  echo "  Stage 0.1 - OpenMP"
  echo "  Stage 0.2 - lzma"
  echo "  Stage 0.3 - zlib"
  echo "  Stage 1.1 - boost"
  echo "  Stage 1.2 - jpeg"
  echo "  Stage 1.3 - tiff"
  echo "  Stage 1.4 - png"
  #echo "  Stage 1.6 - ilmbase"
  echo "  Stage 1.7 - OpenEXR"
  echo "  Stage 2.1 - OpenImageIO"
  echo "  Stage 4.1 - Embree"
  echo "  Stage 4.2 - C-blosc"
  echo "  Stage 4.3 - TBB"
  echo "  Stage 4.4 - OpenCL"
  echo "  Stage 5.5 - OpenImageDenoise"
  echo "  Stage 5.6 - CUDA"
  echo
  exit 1
fi

ROOT=${PWD}
TARGET="$1"
WORK="/tmp/macdepsbuild"
DIST="$2"
STAGE=$4

PAUSE=5

# platform specs
export CFLAGS="-arch arm64" #-w -mmmx -mno-sse3 -mno-ssse3 -msse -msse2 -O2 -pipe -mfpmath=sse -fPIC " #"-arch x86_64 -arch arm64"
export CXXFLAGS="-std=c++1z ${CFLAGS}"
export LDFLAGS="-L${TARGET}/lib" # -arch x86_64 -arch arm64"
export MAKEOPTS="-j"$(( `sysctl -n hw.physicalcpu` ))
export TMP="$WORK"
export TEMP="$WORK"
export TMPDIR="$WORK"

#####################################

mkdir -p $WORK 2>/dev/null

# compilation prechecks
echo -ne "\033]0;Preparing\007"
if [[ ! $STAGE ]] ; then
  S=`cat $TARGET/stage 2>/dev/null`
  if [[ ! $S ]] ; then
    STAGE=0
  else
    STAGE=$S
  fi
fi

echo

# STAGE 0.1 -- OpenMP
NEXT=0.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage openmp openmp*.tar.xz

  mkdir build && cd build

  echo " * Preparing OpenMP build"
  if cmake -DLIBOMP_ENABLE_SHARED=OFF \
           -DCMAKE_INSTALL_PREFIX=$TARGET .. ; then
    echo " * OpenMP prepared successfully"
  else
    echo " !!! OpenMP cmake failed"
    exit 1
  fi

  sleep $PAUSE

  if make $MAKEOPTS && make install ; then
    echo " * OpenMP built successfully"
  else
    echo " !!! OpenMP build failed"
    exit 1
  fi

  complete_stage $NEXT
fi

# STAGE 0.2 -- lzma
NEXT=0.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage lzma xz*.tar.gz

  if ! ./configure --enable-static --disable-shared --disable-scripts --disable-xz \
  --disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-lzma-links \
  --prefix=$TARGET --host=aarch64-apple-darwin20.6.0; then
    echo " !!! lzma configuration failed"
    exit 1
  fi
  sleep $PAUSE
  if make $MAKEOPTS && make install ; then
    echo " * lzma compiled and installed successfully"
  else
    echo " !!! lzma compilation failed"
    exit 1
  fi

  complete_stage $NEXT
fi

# STAGE 0.3 -- zlib
NEXT=0.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
   begin_stage zlib zlib*.tar.gz

   if echo $TARGET | grep -q '\-64' ; then
       ZLIB_PLATFORM="--64"
   else
       ZLIB_PLATFORM=""
   fi
   if ! ./configure --prefix=$TARGET --static $ZLIB_PLATFORM ; then
	echo " !!! zlib configuration failed"
	exit 1
   fi
   sleep $PAUSE
   if make $MAKEOPTS ; then
  cp ./libz.a $TARGET/lib
  cp zlib.h zconf.h $TARGET/include
  cp -vf $DIST/zlib-patch.h $TARGET/include/zlib.h
  chmod 644 $TARGET/include/zlib.h $TARGET/include/zconf.h
	echo " * zlib compiled and installed successfully"
   else
	echo " !!! zlib compilation failed"
	exit 1
   fi

   complete_stage $NEXT
fi
# STAGE 1.1 -- Boost
NEXT=1.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage boost boost*.tar.gz

  #cp -vf $DIST/numpy_patch.cpp libs/python/src/numpy/numpy.cpp

  PYVER=`python3 --version 2>&1 | cut -d' ' -f2 | cut -d '.' -f'1 2'`
  echo " * Compiling boost for python-${PYVER}"
  PYROOT=`python3 -c "import sys; print(sys.prefix)"`
  sleep 1
  cat <<EOF >>tools/build/src/user-config.jam
using python : ${PYVER}
             : python3
             : ${PYROOT}/include/python${PYVER}
             : ${PYROOT}/lib ;
EOF

  echo tools/build/src/user-config.jam

  if ! ./bootstrap.sh --without-icu --prefix=$TARGET/boost \
       --with-python=python3 \
       --with-python-root=${PYROOT} ;then
    echo " !!! Boost bootstrap failed"
    exit 1
  fi
  if ./b2 $MAKEOPTS -aq cflags="$CFLAGS" cxxflags="$CXXFLAGS" \
    $CONFIGOPTS --prefix=$TARGET --layout=system --with-date_time --with-filesystem \
    --with-iostreams --with-locale --with-program_options --with-python --with-regex \
    --with-serialization --with-system --with-thread --with-chrono \
    threading=multi link=static python=${PYVER} \
    release install ; then
    # Fix boost python lib name
    #mv $TARGET/lib/libboost_python*.a $TARGET/lib/libboost_python.a
    #mv $TARGET/lib/libboost_numpy*.a $TARGET/lib/libboost_numpy.a
    echo " * Boost compiled and installed successfully"
  else
    echo " !!! Boost compilation failed"
    exit 1
  fi
  complete_stage $NEXT
fi

# STAGE 1.2 -- Jpeg
NEXT=1.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage jpeg jpeg*.tar.gz

  if ! ./configure --enable-static --disable-shared --prefix=$TARGET ; then
    echo " !!! Jpeg configuration failed"
    exit 1
  fi
  sleep $PAUSE
  if make $MAKEOPTS && cp -vf .libs/libjpeg.a $TARGET/lib && \
   cp -vf *.h $TARGET/include ; then
    echo " * Jpeg compiled and installed successfully"
  else
    echo " !!! Jpeg compilation failed"
    exit 1
  fi

  complete_stage $NEXT
fi

# STAGE 1.3 -- Tiff
NEXT=1.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage tiff tiff*.tar.gz

  if ! ./configure --enable-static --disable-shared --disable-jbig $CONFIGOPTS --prefix=$TARGET ; then
    echo " !!! TIFF configuration failed"
    exit 1
  fi
  sleep $PAUSE
  if make $MAKEOPTS && make install ; then
    echo " * TIFF compiled and installed successfully"
  else
    echo " !!! TIFF compilation failed"
    exit 1
  fi

  # install_name_tool -id @rpath/libtiff.5.dylib  $TARGET/lib/libtiff.5.dylib

  complete_stage $NEXT
fi

# STAGE 1.4 -- PNG
NEXT=1.6
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  export CFLAGS=""
  begin_stage png libpng*.tar.gz

  if ! cmake -DCMAKE_INSTALL_PREFIX=$TARGET -DPNG_SHARED=OFF -DPNG_STATIC=ON -DPNG_TESTS=OFF -DPNG_BUILD_ZLIB=ON ; then
    echo " !!! PNG configuration failed"
    exit 1
  fi
  sleep $PAUSE
  if make $MAKEOPTS ; then
    echo " * PNG compiled and installed successfully"
  else
    echo " !!! PNG compilation failed"
    exit 1
  fi

  if ! cmake -DCMAKE_OSX_ARCHITECTURES='arm64' -DCMAKE_INSTALL_PREFIX=$TARGET -DPNG_SHARED=OFF -DPNG_STATIC=ON -DPNG_TESTS=OFF -DPNG_BUILD_ZLIB=ON ; then
    echo " !!! PNG configuration failed"
    exit 1
  fi
  sleep $PAUSE
  if make $MAKEOPTS && make install ; then
    echo " * PNG compiled and installed successfully"
  else
    echo " !!! PNG compilation failed"
    exit 1
  fi

  export CFLAGS="-arch arm64"
  complete_stage $NEXT
fi

# STAGE 1.6 -- IlmBase
# NEXT=1.7
# if [[ $STAGE && $STAGE < $NEXT ]] ; then
#   begin_stage ilmbase ilmbase*.tar.gz
#
#   if ! cmake -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=$TARGET -DCMAKE_OSX_ARCHITECTURES='arm64;x86_64' ; then
#     echo " !!! ilmbase configuration failed"
#     exit 1
#   fi
#   sleep $PAUSE
#   if make $MAKEOPTS && make install ; then
#     echo " * ilmbase compiled and installed successfully"
#   else
#     echo " !!! ilmbase compilation failed"
#     exit 1
#   fi
#
#   complete_stage $NEXT
# fi

# STAGE 1.7 -- OpenEXR
NEXT=1.8
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage openexr openexr*.tar.gz

  if ! cmake -DCMAKE_INSTALL_PREFIX=$TARGET -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF -DCMAKE_OSX_ARCHITECTURES='arm64' \
             -DINSTALL_OPENEXR_DOCS=OFF -DINSTALL_OPENEXR_EXAMPLES=OFF -DZLIB_INCLUDE_DIR=$TARGET/include -DZLIB_LIBRARY_RELEASE=$TARGET/lib/libz.a \
             -DBoost_NO_BOOST_CMAKE=OFF -DPYILMBASE_ENABLE=OFF ; then
    echo " !!! openexr configuration failed"
    exit 1
  fi
  sleep $PAUSE
  if make $MAKEOPTS && make install ; then
    echo " * openexr compiled and installed successfully"
  else
    echo " !!! openexr compilation failed"
    exit 1
  fi

  complete_stage $NEXT
fi

# STAGE 2.1 -- OpenImageIO
NEXT=4.0
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage openimageio oiio*.tar.gz

  echo " * Building OpenImageIO"

  mkdir build && cd build
  if cmake -DCMAKE_INSTALL_PREFIX=$TARGET -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=OFF -DCMAKE_OSX_ARCHITECTURES='arm64' \
           -DLINKSTATIC=ON -DOIIO_BUILD_TESTS=OFF -DOIIO_BUILD_TOOLS=OFF -DUSE_PYTHON=OFF -DUSE_QT=OFF -DZLIB_INCLUDE_DIR=$TARGET/include \
           -DZLIB_LIBRARY_RELEASE=$TARGET/lib/libz.a ..; then
    echo " * openimageio configuration successful"
  else
    echo " !!! openimageio configuration failed"
    exit 1
  fi

  if make $MAKEOPTS && make install ; then
    echo " * openimageio installed successfully"
  else
    echo " !!! openimageio installation failed"
    exit 1
  fi

    complete_stage $NEXT
fi

# STAGE 4.1 -- TBB
NEXT=4.1
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage TBB oneTBB*.zip

  if cmake -DCMAKE_INSTALL_PREFIX=$TARGET -DCMAKE_BUILD_TYPE='Release' -DTBB_TEST=OFF -DCMAKE_OSX_ARCHITECTURES='arm64' ; then
    echo " * TBB configured successfully"
  else
    echo " !!! TBB configuration failed"
    exit 1
  fi

  if make $MAKEOPTS && make install ; then
    echo " * TBB installed successfully"
  else
    echo " !!! TBB installation failed"
    exit 1
  fi

  complete_stage $NEXT
fi

exit 1
# STAGE 4.2 -- Embree
NEXT=4.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage Embree embree-aa*.zip

  mkdir build-arm64-macos
  cd build-arm64-macos

  if cmake -DCMAKE_BUILD_TYPE=Release \
  -DEMBREE_ARM=On \
  -DEMBREE_IOS=On \
  -DCMAKE_INSTALL_PREFIX=$TARGET \
  -DEMBREE_ISPC_SUPPORT=Off \
  -DEMBREE_TASKING_SYSTEM=gcd \
  -DEMBREE_TUTORIALS=Off \
  -DEMBREE_RAY_PACKETS=Off \
  -DEMBREE_MAX_ISA=AVX2 \
  -DEMBREE_NEON_AVX2_EMULATION=ON \
  -DAS_MAC=ON \
  -DCMAKE_OSX_ARCHITECTURES="arm64" \
  .. ;then
  echo " * Embree configured successfully"
  else
  echo " !!! Embree configuration failed"
  exit 1
  fi

  if make $MAKEOPTS && make install ; then
    echo " * Embree installed successfully"
  else
    echo " !!! Embree installation failed"
    exit 1
  fi

  complete_stage $NEXT
fi

# STAGE 4.2 -- C-blosc
NEXT=4.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage C-blosc c-blosc-*.tar.gz

  mkdir build && cd build

  if cmake -DCMAKE_INSTALL_PREFIX=$TARGET -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF .. && cmake --build . --target install ; then
    echo " * C-blosc compiled successfully"
  else
    echo " !!! C-blosc compilation failed"
    exit 1
  fi

  complete_stage $NEXT
fi

# Stage 4.4 -- OpenCL
NEXT=5.5
if [[ $STAGE && $STAGE < $NEXT ]] ; then
    if cp -R ${DIST}/OpenCL ${TARGET}/include ; then
      echo " * OpenCL header installed successfully"
    else
      echo " !!! OpenCL header installation failed"
			exit 1
    fi
fi

# STAGE 5.5 -- OpenImageDenoise
NEXT=5.6
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  begin_stage OpenImageDenoise oidn*.tar.gz

  mkdir build && cd build

  if cmake -DCMAKE_INSTALL_PREFIX=$TARGET .. && make $MAKEOPTS && make install ; then
    echo " * OpenImageDenoise installed successfully"
  else
    echo " !!! OpenImageDenoise compilation failed"
    exit 1
  fi
  install_name_tool -id @rpath/libOpenImageDenoise.1.dylib  $TARGET/lib/libOpenImageDenoise.1.dylib
  install_name_tool -change $TARGET/lib/libOpenImageDenoise.1.dylib  @rpath/libOpenImageDenoise.1.4.0.dylib  $TARGET/bin/oidnDenoise

  complete_stage $NEXT
fi

# STAGE 5.6 -- CUDA
NEXT=5.7
if [[ $STAGE && $STAGE < $NEXT ]] ; then
  if cp -R ${DIST}/CUDA/* ${TARGET}/lib ; then
      echo " * CUDA libraries installed successfully"
    else
      echo " !!! CUDA libraries installation failed"
			exit 1
    fi
fi

#mkdir -p ${TARGET}/lib/Release
